#+title:AFM / SPM Components
#+property: header-args :mkdirp yes :dir code :results value drawer
#+options: h:5 toc:3

# Ensure latex/pdf export creates a new page per section
#+latex_header: \usepackage{titlesec}
#+latex_header: \newcommand{\sectionbreak}{\clearpage}
#+latex_header: \newcommand{\subsectionbreak}{\clearpage}
#+latex_header: \newcommand{\subsubsectionbreak}{\clearpage}

# Export in landscape mode
#+latex_class: article
#+latex_class_options: [landscape]
#+latex_header: \usepackage[a4paper]{anysize}

#+name: attr_fit_width
#+begin_src bash :var data="" :var width_percent=80 :var latex_only="" :results output :exports none
  if ! [ $latex_only ]; then
    echo "#+attr_org: :width $width_percent%"
    echo "#+attr_html: :width $width_percent%"
  fi
  echo "#+attr_latex: :width $(bc <<< "scale=2; $width_percent/100")\linewidth"
  echo "$data"
#+end_src

#+RESULTS: attr_fit_width
:results:
#+attr_org: :width 80%
#+attr_html: :width 80%
#+attr_latex: :width .80\linewidth

:end:

#+begin_src plantuml :tangle code/style.puml :exports none
<style>
  .input {
    BackgroundColor LightBlue
  }
  .output {
    BackgroundColor Pink
  }
  .param {
    BackgroundColor DarkSeaGreen
  }
  .layout {
    LineColor Transparent
  }
  .center {
    HorizontalAlignment center
  }
  .left {
    HorizontalAlignment left
  }
  .right {
    HorizontalAlignment right
  }
</style>

  skinparam componentStyle rectangle
  'skinparam linetype ortho
  hide stereotype
#+end_src

* Overarching Diagram

#+header: :post attr_fit_width(data=*this*, width_percent=75)
#+begin_src plantuml :file ../images/afm_components.png :tangle code/afm_components.puml
  !include style.puml

  !startsub afm_hardware
  package " " <<layout>> as afm_hardware {
    !includesub cantilever_subsystem.puml!component
    !includesub scanning_subsystem.puml!component

    cantilever_subsystem --[hidden]down-- scanning_subsystem
  }
  !endsub

  package " " <<layout>> as controller_logic {
    !startsub dynamic_mode_components
    component "Dynamic Mode Components" as dynamic_mode_components {
      !includesub lockin_simple.puml!component
      !includesub signal_generator_simple.puml!component
    }
    !endsub

    !startsub feedback_subsystem
    component "Z-Height Feedback Subsystem" as feedback_subsystem {
      !includesub source_mixer_simple.puml!component
      !includesub pid_simple.puml!component

      sm_s_del_out -> pi_e_t_in
    }
    !endsub

    dynamic_mode_components --[hidden]down-- feedback_subsystem
  }
#+end_src

* Components
** Main Hardware
*** Cantilever Subsystem
**** Diagram
#+header: :post attr_fit_width(data=*this*, width_percent=15, latex_only=1)
#+begin_src plantuml :file ../images/cantilever_subsystem.png :tangle code/cantilever_subsystem.puml
  !include style.puml

  !startsub component
  component "Cantilever Subsystem" as cantilever_subsystem {
    component Laser as cs_laser
    component Cantilever as cs_cantilever
    component PSPD as cs_pspd
    component "Piezo" as cs_piezo
    interface "<latex>R_z</latex>" <<output>> as cs_pspd_out
    interface "<latex>S_z</latex>" <<input>> as cs_piezo_in

    cs_laser --> cs_cantilever
    cs_cantilever -u-> cs_pspd
    cs_piezo -u-> cs_cantilever
    cs_pspd -> cs_pspd_out
    cs_piezo_in -> cs_piezo
  }
  !endsub
#+end_src

#+RESULTS:
:results:
#+attr_latex: :width .15\linewidth
[[file:images/cantilever_subsystem.png]]
:end:

**** Parameters

| Grouping    | Parameter             | Description                       | Units |
|-------------+-----------------------+-----------------------------------+-------|
| Cantilever  | ~cantilever_invols~   | Inverse Optical Lever Sensitivity | m/V   |
|             | ~cantilever_k~        | Spring Constant                   |       |
|             | ~cantilever_f0~       | Resonant Frequency                | Hz    |
|             | ~cantilever_q~        | Q-Factor                          |       |
|-------------+-----------------------+-----------------------------------+-------|
| Tip-Surface | ~tip_bias_voltage~    | Tip-Surface Bias Voltage          | V     |
|             | ~tip_bias_amp_gain~   | Bias Amplifier Gain               | V     |
|             | ~tip_bias_amp_offset~ | Bias Amplifier Offset             | V     |
|-------------+-----------------------+-----------------------------------+-------|

*** Scanning Subsystem
**** Diagram

#+header: :post attr_fit_width(data=*this*, width_percent=25, latex_only=1)
#+begin_src plantuml :file ../images/scanning_subsystem.png :tangle code/scanning_subsystem.puml
  !include style.puml

  !startsub component
  '!include <material/grid> '( or vector_line, or vector_polyline)

  component "Scanning Subsystem" as scanning_subsystem {

    'Contains the H/W components (not considering the controller logic)'
    package " " <<layout>> as scan_hw {
      component Sample as ss_sample
      component Piezo as ss_piezo
      component LVDT as ss_lvdt
      interface "<latex>\langle S_x, S_y \rangle</latex>" <<input>> as ss_piezo_in
      interface "<latex>\langle R_x, R_y \rangle</latex>" <<output>> as ss_lvdt_out

      ss_piezo -u-> ss_sample
      ss_piezo -d-> ss_lvdt
      ss_lvdt -> ss_lvdt_out
      ss_piezo_in -> ss_piezo
    }

    'Contains the controller logic'
    package " " <<layout>> as spc_pkg {
      interface "<latex>\langle R_x, R_y \rangle</latex>" <<input>> as spc_in
      interface "<latex>\langle S_x, S_y \rangle</latex>" <<output>> as spc_out
      'Consider adding <$ma_vector_polyline,color=dimgray>" <<center>> for sprite
      component "Scan Pattern\nController\n" <<center>> as scan_pattern_controller

      spc_in -> scan_pattern_controller
      scan_pattern_controller -> spc_out
    }

    spc_out ..> ss_piezo_in
    ss_lvdt_out ..> spc_in

    'Force positioning magic'
    spc_pkg -[hidden]right- scan_hw
  }
  !endsub
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 15%
#+attr_html: :width 15%
#+attr_latex: :scale .15
[[file:images/scanning_subsystem.png]]
:end:

**** Parameters

| Grouping    | Parameter                | Description                 | Units |
|-------------+--------------------------+-----------------------------+-------|
| Piezo       | ~piezo_sensitivity_{3d}~ | Piezo Sensitivity           | Ang/V |
|             | ~piezo_amp_gain_{3d}~    | Piezo Amplifier Gain        | V/V   |
|             | ~piezo_amp_offset_{3d}~  | Piezo Amplifier Offset/Bias | V     |
|-------------+--------------------------+-----------------------------+-------|
| LVDT        | ~lvdt_sensitivity_{3d}~  | LVDT Sensitivity            | V/Ang |
|             | ~lvdt_offset_{3d}~       | LVDT Offset/Bias            | V     |
|-------------+--------------------------+-----------------------------+-------|
| Scan Params | ~scan_dim_{2d}~          | Maximum Scan Dimensions     | m     |
|             | ~scan_roi_dims_{2d}~     | Current Scan Dimensions     | m     |
|             | ~scan_roi_pos_{2d}~      | Current Scan Offset (x,y)   | m     |
|             | ~scan_origin_pos_{2d}~   | Coordinate System Origin    | m     |
|             | ~scan_roi_angle~         | ROI Angle (if applicable)   | \deg  |
|             | ~scan_direction~         | Scan Direction              | N/A   |
|             | ~scanning_speed~         | Scanning Speed              | m/s   |
|             | ~moving_speed~           | Moving Speed (not scanning) | m/s   |
|-------------+--------------------------+-----------------------------+-------|
** Dynamic Mode Components
*** Signal Generator
**** Diagram (Simple) :noexport:

#+header: :post attr_fit_width(data=*this*, width_percent=10)
#+begin_src plantuml :file ../images/signal_generator_simple.png :tangle code/signal_generator_simple.puml
  !include style.puml

  !startsub component
  component "Signal Generator" as signal_generator_simple

  interface "<latex>A_{in}[-]</latex>" <<input>> as sg_amp_in
  interface "<latex>\phi_{in}[-]</latex>" <<input>> as sg_phase_in
  interface "<latex>S_{sin}[\sim]</latex>" <<output>> as sg_si_out
  interface "<latex>S_{cos}[\sim]</latex>" <<output>> as sg_sq_out

  sg_amp_in --> signal_generator_simple
  sg_phase_in --> signal_generator_simple
  signal_generator_simple --> sg_si_out
  signal_generator_simple --> sg_sq_out
  !endsub
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 10%
#+attr_html: :width 10%
#+attr_latex: :scale .10
[[file:images/signal_generator_simple.png]]
:end:

**** Diagram

#+header: :post attr_fit_width(data=*this*, width_percent=33, latex_only=1)
#+begin_src plantuml :file ../images/signal_generator.png :tangle code/signal_generator.puml
  !include style.puml
  left to right direction

  !startsub component
  interface "<latex>A_{in}[-]</latex>" <<input>> as amp_in
  interface "<latex>\phi_{in}[-]</latex>" <<input>> as phase_in
  interface "<latex>S_{sin}[\sim]</latex>" <<output>> as s_inphase
  interface "<latex>S_{cos}[\sim]</latex>" <<output>> as s_outphase

  component "Signal Generator" as signal_generator {
    interface "<latex>\omega_{ref}</latex>" <<param>> as ref_freq
    component "Oscillator" as oscillator

    ref_freq --> oscillator
  }

  amp_in --> oscillator
  phase_in --> oscillator

  oscillator --> s_inphase: "<latex>A_{in}\ sin(\omega_{ref}\ t + \phi_{in})</latex>"
  oscillator --> s_outphase: "<latex>A_{in}\ cos(\omega_{ref}\ t + \phi_{in})</latex>"

  !endsub
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 33%
#+attr_html: :width 33%
#+attr_latex: :width .33\linewidth
[[file:images/signal_generator.png]]
:end:

**** Parameters

| Grouping         | Parameter          | Description                    | Units |
|------------------+--------------------+--------------------------------+-------|
| Signal Generator | ~oscillator_f_ref~ | Oscillator reference frequency | Hz    |
|------------------+--------------------+--------------------------------+-------|

*** Lock-In Amplifier
**** Diagram (Simple) :noexport:

#+header: :post attr_fit_width(data=*this*, width_percent=20)
#+begin_src plantuml :file ../images/lockin_simple.png :tangle code/lockin_simple.puml
  !include style.puml

  !startsub component
  component "Lock-In Amplifier" as lockin_simple
  interface "<latex>U_{in}[\sim]</latex>" <<input>> as li_u_in

  interface "<latex>U_{ref_{sin}}[\sim]</latex>" <<input>> as li_u_refi_in
  interface "<latex>U_{ref_{cos}}[\sim]</latex>" <<input>> as li_u_refq_in
  interface "<latex>V_{sig}[-]</latex>" <<output>> as li_amp_out
  interface "<latex>\varphi[-]</latex>" <<output>> as li_phase_out

  li_u_in --> lockin_simple
  li_u_refi_in --> lockin_simple
  li_u_refq_in --> lockin_simple
  lockin_simple --> li_amp_out
  lockin_simple --> li_phase_out
  !endsub
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 20%
#+attr_html: :width 20%
#+attr_latex: :width .20\linewidth
[[file:images/lockin_simple.png]]
:end:

**** Diagram

#+header: :post attr_fit_width(data=*this*, width_percent=40, latex_only=1)
#+begin_src plantuml :file ../images/lockin.png :tangle code/lockin.puml
  !include style.puml
  left to right direction

  interface "<latex>U_{in}[\sim]</latex>" <<input>> as u_in
  interface "<latex>U_{ref_{sin}}[\sim]</latex>" <<input>> as u_refi
  interface "<latex>U_{ref_{cos}}[\sim]</latex>" <<input>> as u_refq

  component "Lock-In Amplifier" as lockin {
    interface "<latex>T</latex>" <<param>> as avg_cycles
    rectangle "<latex>|\textbf{X+Y}|_2</latex>" as l2_norm
    rectangle "<latex>\theta=atan(\frac{\textbf{Y}}{\textbf{X}})</latex>" as phase_calc

    package " " <<layout>> as integrator_blocks {
      package " " <<layout>> as integrator_block_inphase {
        storage X as x_inphase
        rectangle "<latex>\frac{1}{T}\int_{t-T}^{t}dt = \textbf{X}</latex>" as integrator_inphase

        u_in --> x_inphase
        u_refi --> x_inphase
        x_inphase --> integrator_inphase
      }

      package " " <<layout>> as integrator_block_outphase {
        storage X as x_outphase
        rectangle "<latex>\frac{1}{T}\int_{t-T}^{t}dt = \textbf{Y}</latex>" as integrator_outphase

        u_in --> x_outphase
        u_refq --> x_outphase
        x_outphase --> integrator_outphase
      }
    }

    avg_cycles -> integrator_inphase
    avg_cycles -> integrator_outphase

    integrator_inphase --> l2_norm
    integrator_outphase --> l2_norm
    integrator_inphase --> phase_calc
    integrator_outphase --> phase_calc
  }

  interface "<latex>V_{sig}[-]</latex>" <<output>> as v_sig
  interface "<latex>\varphi[-]</latex>" <<output>> as phi

  l2_norm --> v_sig
  phase_calc --> phi
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 40%
#+attr_html: :width 40%
#+attr_latex: :width .40\linewidth
[[file:images/lockin.png]]
:end:

**** Parameters

| Grouping | Parameter                 | Description      | Units  |
|----------+---------------------------+------------------+--------|
| Lock-In  | ~lockin_averaging_period~ | Averaging Period | cycles |
|----------+---------------------------+------------------+--------|
*** Phase Locked Loop (PLL) (Deprecated??) :noexport:
Note: A PLL is a Lock-In amplifier + the feedback subsystem! The Phase/Amplitude Detector is the Lock-in Amplifier, and the delta + PID controller part is the feedback subsystem. What's missing is an oscillator, to create the final excitation signal.
**** Diagram (Simple)

#+begin_src plantuml :file ../images/pll_simple.png :tangle code/pll_simple.puml
  !include style.puml
  !startsub component
  component "Phase Locked Loop" as pll_simple
  interface "<latex>S_{exc}[\sim]</latex>" <<output>> as s_exc
  interface "<latex>S_{res}[\sim]</latex>" <<input>> as s_res
  interface "<latex>\begin{bmatrix}dA_{res} \\ d\varphi_{res} \\ A_{exc} \\ \varphi_{exc} \end{bmatrix}[-]</latex>" <<output>> as params_out

  s_res -r-> pll_simple
  pll_simple -d-> s_exc
  pll_simple -r-> params_out
  !endsub
#+end_src

#+RESULTS:
[[file:images/pll_simple.png]]

**** Diagram

#+begin_src plantuml :file ../images/pll.png :tangle code/pll.puml
  !include style.puml
  left to right direction

  !startsub component
  interface "<latex>S_{res}[\sim]</latex>" <<input>> as s_res
  interface "<latex>S_{exc}[\sim]</latex>" <<output>> as s_exc

  component "Phase Locked Loop" as pll {
    component "Phase/\nAmplitude\nDetector" as pad
    component "Oscillator" as sine_gen

    package " " <<layout>> as del_pid_blocks {
       package " " <<layout>> as del_pid_block_amp {
         interface "<latex>dA_{res}[-]</latex>" <<output>> as damp_res
         interface "<latex>A_{sp}</latex>" <<param>> as amp_sp
         storage "<latex>\Delta</latex>" as del_amp
         rectangle "PID Controller" as pid_amp
         interface "<latex>A_{exc}[-]</latex>" <<output>> as amp_exc

         damp_res --> del_amp
         amp_sp --> del_amp
         del_amp --> pid_amp
         pid_amp --> amp_exc
       }

       package " " <<layout>> as del_pid_block_phase {
         interface "<latex>d\varphi_{res}[-]</latex>" <<output>> as dphase_res
         interface "<latex>\varphi_{sp}</latex>" <<param>> as phase_sp
         storage "<latex>\Delta</latex>" as del_phase
         rectangle "PID Controller" as pid_phase
         interface "<latex>\varphi_{exc}[-]</latex>" <<output>> as phase_exc

         dphase_res --> del_phase
         phase_sp --> del_phase
         del_phase --> pid_phase
         pid_phase --> phase_exc
         }
    }

    s_res --> pad
    pad --> damp_res
    pad --> dphase_res

    amp_exc --> sine_gen
    phase_exc --> sine_gen
    sine_gen --> s_exc
  }

  component "Resonator" as resonator
  s_exc -> resonator
  s_exc -u-> pad
  resonator -u-> s_res

  !endsub
#+end_src

#+RESULTS:
[[file:images/pll.png]]

** Feedback Subsystem
*** Multi-Source Setpoint Control
**** Diagram (Simple) :noexport:

#+begin_src plantuml :file ../images/source_mixer_simple.png :tangle code/source_mixer_simple.puml
  !include style.puml

  !startsub component
  component "Multi-Source \nSetpoint Control" as source_mixer_simple
  interface "<latex>S_{in[0:N]}</latex>" <<input>> as sm_s_in
  interface "<latex>S_{\Delta}</latex>" <<output>> as sm_s_del_out

  sm_s_in -> source_mixer_simple
  source_mixer_simple -> sm_s_del_out
  !endsub

#+end_src

#+RESULTS:
[[file:images/source_mixer_simple.png]]

**** Diagram

#+header: :post attr_fit_width(data=*this*, width_percent=45, latex_only=1)
#+begin_src plantuml :file ../images/source_mixer.png :tangle code/source_mixer.puml
  !include style.puml
  left to right direction

  !startsub component
  interface "<latex>S_{in[0:N]}</latex>" <<input>> as s_in

  component "Multi-Source Setpoint Control" as source_mixer {
    rectangle "\n<&layers>" as single_source_block #line:grey;line.dashed {
      rectangle "<latex>LPF_i</latex>" as lpf
      rectangle "<latex>TR_i</latex>" as tr
      storage "<latex>\Delta</latex>" as delta
      interface "<latex>y_{sp}_{i}</latex>" <<param>> as sp_i
      interface "<latex>G_i</latex>" <<param>> as g_i
      storage "X" as gain

      lpf --> tr
      tr --> delta
      sp_i --> delta
      delta --> gain
      g_i --> gain
    }
  }

  s_in --> lpf

  storage "<latex>\textbf{\Sigma}</latex>" as sum
  interface "<latex>S_{\Delta}(t)</latex>" <<output>> as s_del

  gain --> sum: "<&layers>\n"
  sum --> s_del
 !endsub

#+end_src

#+RESULTS:
:results:
#+attr_org: :width 45%
#+attr_html: :width 45%
#+attr_latex: :width .45\linewidth
[[file:images/source_mixer.png]]
:end:

**** Parameters

| Grouping        | Parameter                                | Description                                        | Units |
|-----------------+------------------------------------------+----------------------------------------------------+-------|
| Input           | ~fb_input_{#}_units_to_v_factor~         | Units-to-V conversion (Input represents x as DC V) | x/V   |
|                 | ~fb_input_{#}_gain~                      | Gi: gain applied to signal i (before summing)      |       |
|                 | ~fb_input_{#}_setpoint~                  | Reference Set-Point                                | V     |
|-----------------+------------------------------------------+----------------------------------------------------+-------|
| Low-Pass Filter | ~fb_input_{#}_low_pass_freq~             | Cut-off Frequency                                  | Hz    |
|                 | ~fb_input_{#}_low_pass_adaptive_fmin~    | Min. F0 (if adaptive)                              | Hz    |
|                 | ~fb_input_{#}_low_pass_adaptive_fmax~    | Max. F0 (if adaptive)                              | Hz    |
|                 | ~fb_input_{#}_low_pass_adaptive_current~ | Current Crossover (if adaptive)                    | A     |
|-----------------+------------------------------------------+----------------------------------------------------+-------|
| Transform       | ~fb_input_{#}_transform_mode~            | Mode: 0:Off, 1:On, 2:Log, 4:IIR, 8:FUZZY           | n/a   |
|                 | ~fb_input_{#}_transform_fuzzy_threshold~ | Fuzzy-Mode Threshold Level (FUZZY Only)            | V     |
|-----------------+------------------------------------------+----------------------------------------------------+-------|

*** PID Controller
**** Diagram (Simple) :noexport:

#+begin_src plantuml :file ../images/pid_simple.png :tangle code/pid_simple.puml
  !include style.puml

  !startsub component
  interface "e(t)" <<input>> as pi_e_t_in
  interface "u(t)" <<output>> as pi_u_t_out
  component "PID Controller" as pid_simple

  pi_e_t_in -> pid_simple
  pid_simple -> pi_u_t_out
  !endsub

#+end_src

#+RESULTS:
[[file:images/pid_simple.png]]

**** Diagram

#+header: :post attr_fit_width(data=*this*, width_percent=45, latex_only=1)
#+begin_src plantuml :file ../images/pid.png :tangle code/pid.puml
  !include style.puml
  left to right direction

  interface "e(t)" <<input>> as e_t
  interface "u(t)" <<output>> as u_t
  interface "r(t)" as r_t
  interface "y(t)" as y_t
  storage "<latex>\Delta</latex>" as diff
  rectangle "Plant / Process" as proc

  r_t --> diff
  y_t --> diff
  diff --> e_t
  u_t --> proc
  proc --> y_t

  !startsub pid
  component "PID Controller" as pid {
    package " " <<layout>> as pid_blocks {
      rectangle "<latex>\textbf{P}: K_p e(t)</latex>" as pid_p
      rectangle "<latex>\textbf{I}: K_i \int_{0}^{t}e(\tau)d\tau</latex>" as pid_i
      rectangle "<latex>\textbf{D}: K_d \frac{de(t)}{dt}</latex>" as pid_d

      pid_p -[hidden]right- pid_i
      pid_i -[hidden]right- pid_d
    }
    storage "<latex>\sum</latex>" as sum

    e_t --> pid_p
    e_t --> pid_i
    e_t --> pid_d

    pid_p --> sum
    pid_i --> sum
    pid_d --> sum

    sum --> u_t
  }
  !endsub
  #+end_src

#+RESULTS:
:results:
#+attr_org: :width 45%
#+attr_html: :width 45%
#+attr_latex: :width .45\linewidth
[[file:images/pid.png]]
:end:

**** Parameters

| Grouping | Parameter      | Description         | Units |
|----------+----------------+---------------------+-------|
| PID      | ~pid_gain_p~   | Proportional Gain   | V/V   |
|          | ~pid_gain_i~   | Integral Gain       | V/V   |
|          | ~pid_gain_d~   | Derivative Gain     | V/V   |
|          | ~pid_ref_freq~ | Reference Frequency | Hz    |
|----------+----------------+---------------------+-------|

* AFM / SPM Setups
** Contact Modes

#+header: :post attr_fit_width(data=*this*, width_percent=55, latex_only=1)
#+begin_src plantuml :file ../images/contact_mode.png :tangle code/contact_mode.puml
  !include style.puml

  !includesub cantilever_subsystem.puml!component
  !includesub afm_components.puml!feedback_subsystem

  note top of feedback_subsystem
    Maintains z-height based on current z-height.
  end note

  cs_pspd_out .> sm_s_in
  pi_u_t_out ..> cs_piezo_in

#+end_src

Approach:

Scan over a region with a static tip, while maintaining a constant force on the tip. This is achieved by a feedback loop, where the z-height (i.e. cantilever deflection) is kept constant. This achieves a constant-force scan.

Alternatively:

Set the z-height constant and scan with the feedback control off. This achieves a constant-height scan.

** Dynamic Modes
*** AM-AFM - Amplitude Modulation

#+header: :post attr_fit_width(data=*this*, width_percent=75)
#+begin_src plantuml :file ../images/am-afm.png :tangle code/am-afm.puml
  !include style.puml

  !includesub cantilever_subsystem.puml!component
  !includesub afm_components.puml!dynamic_mode_components

  ' Feedback Components '
  !includesub afm_components.puml!feedback_subsystem
  note bottom of feedback_subsystem
    Maintains signal amplitude by varying z-height.
  end note

  cs_pspd_out ..> li_u_in
  sg_si_out .u.> li_u_refi_in
  sg_sq_out .u.> li_u_refq_in
  sg_si_out ..> cs_piezo_in: "<latex>S_i[\sim]</latex>"

  li_amp_out ..> sm_s_in
  pi_u_t_out ..> cs_piezo_in: "<latex>S_i[-]</latex>"

  li_amp_out ..> sg_amp_in
  li_phase_out ..> sg_phase_in
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 75%
#+attr_html: :width 75%
#+attr_latex: :width .75\linewidth
[[file:images/am-afm.png]]
:end:

Approach:

Scan over a region with the tip oscillating its z-height at its resonant frequency, while maintaining the oscillation amplitude constant. This is achieved by a feedback loop, where the z-height is changed whenever the oscillation amplitude difference between the excitation signal amplitude and resonator signal amplitude varies from a desired difference.

Notes:
- The change in amplitude is due to a change in the system's resonant frequency. You can visualize this as if the amplitude/frequency curve is translating along the frequency axis. Doing so decreases the amplitude; we modify the z-height so that the system's resonant frequency is returned to its initial state (where the amplitude is maximum).

*** FM-AFM - Frequency Modulation

#+header: :post attr_fit_width(data=*this*, width_percent=85)
#+begin_src plantuml :file ../images/fm-afm.png :tangle code/fm-afm.puml
  !include style.puml

  !includesub cantilever_subsystem.puml!component

  package " " <<layout>> as sg_package {
    !includesub signal_generator_simple.puml!component
  }
  package " " <<layout>> as li_package {
    !includesub lockin_simple.puml!component
  }

  ' Feedback aspects'
  !includesub afm_components.puml!feedback_subsystem
  note bottom of feedback_subsystem
    Maintains resonant frequency constant by varying z-height.
  end note

  component "Amplitude Feedback" as amp_feedback {
    component "Single Source\nSetpoint Control" as amp_sp_control
    component "PID Controller" as amp_pid
    interface "<latex>A_{in}</latex>" <<input>> as amp_feedback_in
    interface "<latex>dA_{out}</latex>" <<output>> as amp_feedback_out

    amp_feedback_in -> amp_sp_control
    amp_sp_control -> amp_pid
    amp_pid -> amp_feedback_out
  }
  note top of amp_feedback
    Maintains AC amplitude constant.
  end note

  component "Phase Feedback" as phase_feedback {
    component "Single Source\nSetpoint Control" as phase_sp_control
    component "PID Controller" as phase_pid
    interface "<latex>\phi_{in}</latex>" <<input>> as phase_feedback_in
    interface "<latex>d\phi_{out}</latex>" <<output>> as phase_feedback_out

    phase_feedback_in -> phase_sp_control
    phase_sp_control -> phase_pid
    phase_pid -> phase_feedback_out
  }
  note top of phase_feedback
    Varies AC excitation signal so resonant is at current resonant frequency.
    ('Phase Locked Loop' component).
  end note

  cs_pspd_out ..> li_u_in
  sg_si_out .u.> li_u_refi_in
  sg_sq_out .u.> li_u_refq_in
  sg_sq_out ..> cs_piezo_in: "<latex>S_i[\sim]</latex>"

  li_amp_out ..> amp_feedback_in
  amp_feedback_out ..> sg_amp_in

  li_phase_out ..> phase_feedback_in
  phase_feedback_out ..> sg_phase_in

  phase_feedback_out ..> sm_s_in
  pi_u_t_out ..> cs_piezo_in: "<latex>S_i[-]</latex>"
#+end_src

#+RESULTS:
:results:
#+attr_org: :width 85%
#+attr_html: :width 85%
#+attr_latex: :width .85\pagewidth
[[file:images/fm-afm.png]]
:end:

Approach:

Scan over a region with the tip oscillating its z-height at its resonant frequency, while maintaining the resonant frequency constant. This requires 3 different feedback loops:
- The z-height feedback loop, where the z-height is changed whenever the frequency difference between excitation signal frequency and resonator signal frequency varies from a desired difference.
- The phased lock loop component, where the excitation signal phase is changed whenever the phase difference between excitation signal phase and resonator signal phase varies from a desired difference. Since phase and frequency are intricately linked (instantaneous frequency is temporal rate of change of instantaneous phase), maintaining the phase ensures we maintain the frequency. Thus, this feedback ensures that *as the system resonant frequency changes*, we update the *excitation signal* to keep driving the system *on resonance* (i.e. the resonant signal frequency is always at the system's current resonant frequency).
- Traditionally, there is also an amplitude feedback loop, which ensures that the amplitude of resonance is kept constant.

Notes:
- We require the PLL *and* z-height feedback because they function at different frequencies: PLL at ~100 kHz, z-height at ~1 kHz.
- So: the PLL maintains the signal on resonance *much more quickly* than the z-height maintains the resonant frequency constant.

* Full Table of Parameters

#+attr_latex: :environment longtable
| Subsystem     | Grouping           | Parameter                                | Description                                        | Units  |
|---------------+--------------------+------------------------------------------+----------------------------------------------------+--------|
| Cantilever    | Cantilever         | ~cantilever_invols~                      | Inverse Optical Lever Sensitivity                  | m/V    |
|               |                    | ~cantilever_k~                           | Spring Constant                                    | n/a    |
|               |                    | ~cantilever_f0~                          | Resonant Frequency                                 | Hz     |
|               |                    | ~cantilever_q~                           | Q-Factor                                           | n/     |
|               |                    |                                          |                                                    |        |
|               | Tip-Surface        | ~tip_bias_voltage~                       | Tip-Surface Bias Voltage                           | V      |
|               |                    | ~tip_bias_amp_gain~                      | Bias Amplifier Gain                                | V      |
|               |                    | ~tip_bias_amp_offset~                    | Bias Amplifier Offset                              | V      |
|---------------+--------------------+------------------------------------------+----------------------------------------------------+--------|
| Scanning      | Piezo              | ~piezo_sensitivity_{3d}~                 | Piezo Sensitivity                                  | Ang/V  |
|               |                    | ~piezo_amp_gain_{3d}~                    | Piezo Amplifier Gain                               | V/V    |
|               |                    | ~piezo_amp_offset_{3d}~                  | Piezo Amplifier Offset/Bias                        | V      |
|               |                    |                                          |                                                    |        |
|               | LVDT               | ~lvdt_sensitivity_{3d}~                  | LVDT Sensitivity                                   | V/Ang  |
|               |                    | ~lvdt_offset_{3d}~                       | LVDT Offset/Bias                                   | V      |
|               |                    |                                          |                                                    |        |
|               | Scan Params        | ~scan_dim_{2d}~                          | Maximum Scan Dimensions                            | m      |
|               |                    | ~scan_roi_dims_{2d}~                     | Current Scan Dimensions                            | m      |
|               |                    | ~scan_roi_pos_{2d}~                      | Current Scan Offset (x,y)                          | m      |
|               |                    | ~scan_origin_pos_{2d}~                   | Coordinate System Origin                           | m      |
|               |                    | ~scan_roi_angle~                         | ROI Angle (if applicable)                          | \deg   |
|               |                    | ~scan_direction~                         | Scan Direction                                     | N/A    |
|               |                    | ~scanning_speed~                         | Scanning Speed                                     | m/s    |
|               |                    | ~moving_speed~                           | Moving Speed (not scanning)                        | m/s    |
|---------------+--------------------+------------------------------------------+----------------------------------------------------+--------|
| Main Feedback | Input              | ~fb_input_{#}_units_to_v_factor~         | Units-to-V conversion (Input represents x as DC V) | x/V    |
|               |                    | ~fb_input_{#}_gain~                      | Gi: gain applied to signal i (before summing)      | V/V    |
|               |                    | ~fb_input_{#}_setpoint~                  | Reference Set-Point                                | V      |
|               |                    |                                          |                                                    |        |
|               | Low-Pass Filter    | ~fb_input_{#}_low_pass_freq~             | Cut-off Frequency                                  | Hz     |
|               |                    | ~fb_input_{#}_low_pass_adaptive_fmin~    | Min. F0 (if adaptive)                              | Hz     |
|               |                    | ~fb_input_{#}_low_pass_adaptive_fmax~    | Max. F0 (if adaptive)                              | Hz     |
|               |                    | ~fb_input_{#}_low_pass_adaptive_current~ | Current Crossover (if adaptive)                    | A      |
|               |                    |                                          |                                                    |        |
|               | Transform          | ~fb_input_transform_mode~                | Mode: 0:Off, 1:On, 2:Log, 4:IIR, 8:FUZZY           | n/a    |
|               |                    | ~fb_input_transform_fuzzy_threshold~     | Fuzzy-Mode Threshold Level (FUZZY Only)            | V      |
|               |                    |                                          |                                                    |        |
|               | PID                | ~fb_pid_gain_p~                          | Proportional Gain                                  | V/V    |
|               |                    | ~fb_pid_gain_i~                          | Integral Gain                                      | V/V    |
|               |                    | ~fb_pid_gain_d~                          | Derivative Gain                                    | V/V    |
|               |                    | ~fb_pid_ref-freq~                        | Reference Frequency                                | Hz     |
|---------------+--------------------+------------------------------------------+----------------------------------------------------+--------|
| Dynamic Mode  | Signal Generator   | ~oscillator_f_ref~                       | Oscillator reference frequency                     | Hz     |
|               |                    |                                          |                                                    |        |
|               | Lock-In            | ~lockin_averaging_period~                | Averaging Period                                   | cycles |
|               |                    |                                          |                                                    |        |
|               | Amplitude Feedback | ~amp_fb_enabled~                         | On/Off                                             | n/a    |
|               |                    | ~amp_fb_input_v_to_v_factor~             | V-to-V conversion (represents V-amplitude as DC V) | V/V    |
|               |                    | ~amp_fb_input_gain~                      | Gain applied to signal i                           | V/V    |
|               |                    | ~amp_fb_input_setpoint~                  | dAmplitude Set-Point                               | V      |
|               |                    | ~amp_fb_low_pass_freq~                   | Cut-off Frequency                                  | Hz     |
|               |                    | ~amp_fb_pid_gain_p~                      | Proportional Gain                                  | V/V    |
|               |                    | ~amp_fb_pid_gain_i~                      | Integral Gain                                      | V/V    |
|               |                    | ~amp_fb_pid_gain_d~                      | Derivative Gain                                    | V/V    |
|               |                    |                                          |                                                    |        |
|               | Phase Feedback     | ~pll_fb_enabled~                         | On/Off                                             | n/a    |
|               |                    | ~pll_fb_input_hz_to_v_factor~            | dHz-to-V conversion (represents Hz as DC V)        | Hz/V   |
|               |                    | ~pll_fb_input_gain~                      | Gain applied to signal i                           | V/V    |
|               |                    | ~pll_fb_input_setpoint~                  | dFrequency Set-Point                               | V      |
|               |                    | ~pll_fb_low_pass_freq~                   | Cut-off Frequency                                  | Hz     |
|               |                    | ~pll_fb_pid_gain_p~                      | Proportional Gain                                  | V/V    |
|               |                    | ~pll_fb_pid_gain_i~                      | Integral Gain                                      | V/V    |
|               |                    | ~pll_fb_pid_gain_d~                      | Derivative Gain                                    | V/V    |
|---------------+--------------------+------------------------------------------+----------------------------------------------------+--------|
